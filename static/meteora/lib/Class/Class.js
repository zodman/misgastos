
var Class=new Native({name:'Class',initialize:function(properties){properties=properties||{};var klass=function(){for(var property in this)this[property]=$unlink(this[property]);this.parent=null;['Implements','Extends'].each(function(Property){if(!this[Property])return;Class[Property](this,this[Property]);delete this[Property];},this);this.constructor=klass;var self=(arguments[0]!==$empty&&this.initialize)?this.initialize.apply(this,arguments):this;if(this.options&&this.options.initialize)this.options.initialize.call(this);return self;};$extend(klass,this);klass.constructor=Class;klass.prototype=properties;return klass;}});Class.implement({implement:function(){Class.Implements(this.prototype,Array.slice(arguments));return this;}});Class.Implements=function(self,klasses){$splat(klasses).each(function(klass){$extend(self,($type(klass)=='class')?new klass($empty):klass);});};Class.Extends=function(self,klass){klass=new klass($empty);for(var property in klass){var kp=klass[property];var sp=self[property];self[property]=(function(previous,current){if($defined(current)&&previous!=current){var type=$type(current);if(type!=$type(previous))return current;switch(type){case'function':return function(){current.parent=self.parent=previous.bind(this);var value=current.apply(this,arguments);self.parent=current.parent;return value;};case'object':return $merge(previous,current);default:return current;}}
return previous;})(kp,sp);}};Class.prototype.extend=function(properties){properties.Extends=this;return new Class(properties);};